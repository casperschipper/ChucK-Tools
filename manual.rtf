{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\b\fs24 \cf0 Class CS\
\

\b0 a pot-porrie of usefull functions. They return normal chuck types. This can be an advantage when speed is important.\
\
	
\b choose\
\
	
\b0 returns	: 
\i int\
	
\i0 input		: 
\i int array\
	\
	
\i0 randomly picks a value from an array (without changing the array).\
\
	cs.choose([1,2,3,4,5])\
	3\
	1\
	5\
	etc...\
\
	
\b stepper\
\
	
\b0 returns 	: 
\i int array\
	
\i0 input		: 
\i start, step, amount\
\
	
\i0 stepper returns an array the size of amount, adding 
\i step 
\i0 to every next value.\
	\
	\ul Example:\
\
	\ulnone cs.stepper (3,2,10)\
	[3,5,7,9,11,13,15,17,19,21]\
\
	
\b stepperf\
\
	
\b0 Float version of stepper.\
\
	
\b fill\
\
	
\b0 returns	: 
\i int array
\i0 \
	intput         : 
\i amount,low,high\
\
	
\i0 returns an 
\i amount
\i0 -sized array with random values between and including 
\i low
\i0  	and 
\i high
\i0 .\
\
	\ul Example:\
\
	\ulnone cs.fill(10,0,3)\
\
	
\b chance\
\
	
\b0 returns	: 
\i int
\i0 \
	input		: 
\i int p, int n\
\
	
\i0 Takes a random number between 0 and n and checks if it is smaller then p.\
	usefull for making things happen sometimes.\
\
	
\b range\
\
	
\b0 returns	: 
\i int array
\i0 \
	input		: 
\i int low, int high, int step\
\
	
\i0 Example:\
	low = 0 high = 10 step = 2\
	[0,2,4,6,8,10]\
\

\b Class tLine\
\

\b0 can be used to generate values that change over time. \
\
	
\b init\
\
	
\b0 returns	: 
\i void\
	
\i0 input		: 
\i float a, float b, dur t 
\i0 \ul or\ulnone  
\i float t\
\
	
\i0 initialises the object to go from a to b in time t.
\i \
\
	
\i0\b next\
\
	
\b0 returns	: float\
	intut		: void\
\
	returns the next value.\
\

\b Class TimedList:\
\
	
\b0 A class that contains values that are connected to a point in time (like a     	breakpoint segments.\
\
	
\b append \
\
	
\b0 returns: 	nothing\
	input:	dur time, float value\
\
	Adds a next breakpoint to the list.\
\

\b 	appenddur
\b0 \
\
	returns:	nothing\
	input	:	dur time, float value\
\
	Adds a relative point to the list.\
\
\
\
\
\
\
\
\
	}